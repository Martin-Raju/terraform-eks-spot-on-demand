name: Deploy EKS and Karpenter
on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    outputs:
       cluster_name: ${{ steps.tf_outputs.outputs.cluster_name }}
       cluster_endpoint: ${{ steps.tf_outputs.outputs.cluster_endpoint }}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -upgrade

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
        #run: terraform destroy -auto-approve

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Export Terraform Outputs
        id: tf_outputs
        working-directory: ./terraform
        shell: bash
        run: |
          echo "Fetching Terraform outputs from remote S3 backend..."

          terraform init -input=false -backend-config="region=${AWS_REGION}" -reconfigure

          # Run terraform output and remove the first non-JSON line if it exists
          terraform output -json > tf_outputs_raw.json

          # If the first line doesn't start with '{', strip it out
          if ! head -n 1 tf_outputs_raw.json | grep -q '^{'; then
            tail -n +2 tf_outputs_raw.json > tf_outputs.json
          else
            cp tf_outputs_raw.json tf_outputs.json
          fi

          echo "---- Cleaned Terraform Outputs ----"
          cat tf_outputs.json
          echo "-----------------------------------"

          # Validate JSON
          if ! jq empty tf_outputs.json; then
            echo "❌ Invalid JSON in tf_outputs.json"
            exit 1
          fi

          # Parse specific outputs
          cluster_name=$(jq -r '.cluster_name.value' tf_outputs.json)
          cluster_endpoint=$(jq -r '.cluster_endpoint.value' tf_outputs.json)

          echo "✅ Parsed Outputs:"
          echo " - cluster_name: $cluster_name"
          echo " - cluster_endpoint: $cluster_endpoint"

          # Export to GitHub outputs
          echo "cluster_name=$cluster_name" >> $GITHUB_OUTPUT
          echo "cluster_endpoint=$cluster_endpoint" >> $GITHUB_OUTPUT

  # karpenter:
  #   runs-on: ubuntu-latest
  #   needs: terraform

  #   env:
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     CLUSTER_NAME: ${{ needs.terraform.outputs.cluster_name }}
  #     CLUSTER_ENDPOINT: ${{ needs.terraform.outputs.cluster_endpoint }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'latest'

  #     - name: Setup Helm
  #       uses: azure/setup-helm@v3
  #       with:
  #         version: '3.14.0'

  #     - name: Setup AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Update kubeconfig
  #       run: |
  #         aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

  #     - name: Install Karpenter Helm Chart
  #       run: |
  #         helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \
  #           --version 1.6.0 \
  #           --namespace kube-system \
  #           --create-namespace \
  #           --set settings.clusterName=$CLUSTER_NAME \
  #           --set settings.clusterEndpoint=$CLUSTER_ENDPOINT \
  #           --set webhook.enabled=false \
  #           --wait

  #     - name: Apply Karpenter CRDs
  #       run: |
  #         kubectl apply -f ./K8s/karpenter/karpenter-provisioners-crd.yaml

  #     - name: Apply Karpenter Provisioner
  #       run: |
  #         kubectl apply -f ./K8s/karpenter/karpenter-provisioners.yaml

  #     - name: Verify Installation
  #       run: |
  #         echo "Checking Karpenter pods..."
  #         kubectl get pods -n kube-system | grep karpenter || true
  #         echo "Checking Provisioners..."
  #         kubectl get provisioners









# name: Deploy EKS with Terraform

# on:
  # workflow_dispatch:

# jobs:
  # terraform:
    # runs-on: ubuntu-latest

    # env:
      # AWS_REGION: ${{ secrets.AWS_REGION }}
      # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # steps:
      # - name: Checkout repository
        # uses: actions/checkout@v3

      # - name: Setup Terraform
        # uses: hashicorp/setup-terraform@v2
        # with:
          # terraform_version: 1.6.0

      # - name: Clean .terraform directory
        # working-directory: ./terraform
        # run: |
          # echo "Cleaning existing .terraform directory..."
          # rm -rf .terraform .terraform.lock.hcl
          # echo "Cleanup complete."

      # - name: Terraform Init
        # working-directory: ./terraform
        # #run: terraform init -input=false
        # run: terraform init -upgrade

      # - name: Terraform Plan
        # working-directory: ./terraform
        # run: terraform plan -input=false -out=tfplan

      # - name: Terraform Apply
        # working-directory: ./terraform
        # #run: terraform apply -input=false -auto-approve tfplan
        # run: terraform destroy -auto-approve
