name: Deploy EKS and Karpenter
on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    outputs:
       cluster_name: ${{ steps.tf_outputs.outputs.cluster_name }}
       cluster_endpoint: ${{ steps.tf_outputs.outputs.cluster_endpoint }}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -upgrade

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
        #run: terraform destroy -auto-approve

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Export Terraform Outputs
        id: tf_outputs
        working-directory: ./terraform
        shell: bash
        run: |
          echo "🔍 Fetching outputs directly from terraform.tfstate..."
          STATE_FILE="./terraform.tfstate"

          if [ ! -f "$STATE_FILE" ]; then
            echo "❌ State file not found at $STATE_FILE"
            exit 1
          fi

          cluster_name=$(jq -r '.outputs.cluster_name.value' "$STATE_FILE")
          cluster_endpoint=$(jq -r '.outputs.cluster_endpoint.value' "$STATE_FILE")

          echo "✅ Extracted outputs from state file:"
          echo " - cluster_name: $cluster_name"
          echo " - cluster_endpoint: $cluster_endpoint"

          if [[ -z "$cluster_name" || "$cluster_name" == "null" ]]; then
            cluster_name="unknown"
          fi
          if [[ -z "$cluster_endpoint" || "$cluster_endpoint" == "null" ]]; then
            cluster_endpoint="unknown"
          fi

          {
            echo "cluster_name=${cluster_name}"
            echo "cluster_endpoint=${cluster_endpoint}"
          } >> "$GITHUB_OUTPUT"
        
      # - name: Export Terraform Outputs
      #   id: tf_outputs
      #   working-directory: ./terraform
      #   shell: bash
      #   run: |
      #     echo "Fetching Terraform outputs safely..."

      #     # Detect real Terraform binary
      #     REAL_TERRAFORM=$(command -v terraform)
      #     echo "Terraform path (before sanity fix): $REAL_TERRAFORM"

      #     # If it's a wrapper, find the actual binary from host cache
      #     if [[ "$REAL_TERRAFORM" == *"terraform-bin"* || ! -x "$REAL_TERRAFORM" ]]; then
      #       REAL_TERRAFORM=$(find /opt/hostedtoolcache/terraform -type f -name terraform | sort | tail -n 1)
      #     fi

      #     # Fallback to default installation path if still not found
      #     if [[ ! -x "$REAL_TERRAFORM" ]]; then
      #       REAL_TERRAFORM="/usr/bin/terraform"
      #     fi

      #     echo "Using real Terraform binary: $REAL_TERRAFORM"

      #     chmod +x "$REAL_TERRAFORM"

      #     # Run via eval to bypass GitHub wrapper
      #     cluster_name=$(eval "$REAL_TERRAFORM output -raw cluster_name 2>/dev/null" || echo "unknown")
      #     cluster_endpoint=$(eval "$REAL_TERRAFORM output -raw cluster_endpoint 2>/dev/null" || echo "unknown")

      #     echo "Terraform Outputs:"
      #     echo " - cluster_name: $cluster_name"
      #     echo " - cluster_endpoint: $cluster_endpoint"

      #     # Clean any stray debug lines
      #     clean_cluster_name=$(echo "$cluster_name" | sed 's/::debug::.*//g' | tr -d '\r')
      #     clean_cluster_endpoint=$(echo "$cluster_endpoint" | sed 's/::debug::.*//g' | tr -d '\r')

      #     echo "Cleaned Outputs:"
      #     echo " - cluster_name: $clean_cluster_name"
      #     echo " - cluster_endpoint: $clean_cluster_endpoint"

      #     # Export outputs to GitHub Actions
      #     echo "cluster_name=$clean_cluster_name" >> "$GITHUB_OUTPUT"
      #     echo "cluster_endpoint=$clean_cluster_endpoint" >> "$GITHUB_OUTPUT"
      #     echo "$clean_cluster_name"
      #     echo "$clean_cluster_endpoint"

    
  # karpenter:
  #   runs-on: ubuntu-latest
  #   needs: terraform

  #   env:
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     CLUSTER_NAME: ${{ needs.terraform.outputs.cluster_name }}
  #     CLUSTER_ENDPOINT: ${{ needs.terraform.outputs.cluster_endpoint }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: 'latest'

  #     - name: Setup Helm
  #       uses: azure/setup-helm@v3
  #       with:
  #         version: '3.14.0'

  #     - name: Setup AWS CLI
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Update kubeconfig
  #       run: |
  #         aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

  #     - name: Install Karpenter Helm Chart
  #       run: |
  #         helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \
  #           --version 1.6.0 \
  #           --namespace kube-system \
  #           --create-namespace \
  #           --set settings.clusterName=$CLUSTER_NAME \
  #           --set settings.clusterEndpoint=$CLUSTER_ENDPOINT \
  #           --set webhook.enabled=false \
  #           --wait

  #     - name: Apply Karpenter CRDs
  #       run: |
  #         kubectl apply -f ./K8s/karpenter/karpenter-provisioners-crd.yaml

  #     - name: Apply Karpenter Provisioner
  #       run: |
  #         kubectl apply -f ./K8s/karpenter/karpenter-provisioners.yaml

  #     - name: Verify Installation
  #       run: |
  #         echo "Checking Karpenter pods..."
  #         kubectl get pods -n kube-system | grep karpenter || true
  #         echo "Checking Provisioners..."
  #         kubectl get provisioners









# name: Deploy EKS with Terraform

# on:
  # workflow_dispatch:

# jobs:
  # terraform:
    # runs-on: ubuntu-latest

    # env:
      # AWS_REGION: ${{ secrets.AWS_REGION }}
      # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # steps:
      # - name: Checkout repository
        # uses: actions/checkout@v3

      # - name: Setup Terraform
        # uses: hashicorp/setup-terraform@v2
        # with:
          # terraform_version: 1.6.0

      # - name: Clean .terraform directory
        # working-directory: ./terraform
        # run: |
          # echo "Cleaning existing .terraform directory..."
          # rm -rf .terraform .terraform.lock.hcl
          # echo "Cleanup complete."

      # - name: Terraform Init
        # working-directory: ./terraform
        # #run: terraform init -input=false
        # run: terraform init -upgrade

      # - name: Terraform Plan
        # working-directory: ./terraform
        # run: terraform plan -input=false -out=tfplan

      # - name: Terraform Apply
        # working-directory: ./terraform
        # #run: terraform apply -input=false -auto-approve tfplan
        # run: terraform destroy -auto-approve
