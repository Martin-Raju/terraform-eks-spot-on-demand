name: Deploy EKS and Karpenter
on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    outputs:
       cluster_name: ${{ steps.tf_outputs.outputs.cluster_name }}
       cluster_endpoint: ${{ steps.tf_outputs.outputs.cluster_endpoint }}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -upgrade

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
        #run: terraform destroy -auto-approve

      - name: Export Terraform Outputs
        id: tf_outputs
        working-directory: ./terraform
        shell: bash
        run: |
          echo "Fetching Terraform outputs..."

          # Use the real terraform binary (bypass the wrapper)
          TF_CMD=$(which terraform)

          # Run quietly, strip debug and command lines
          #cluster_name=$($TF_CMD output -raw cluster_name 2>/dev/null | sed -E '/^\[command\]/d; /^::/d')
          #cluster_endpoint=$($TF_CMD output -raw cluster_endpoint 2>/dev/null | sed -E '/^\[command\]/d; /^::/d')
          cluster_name=$($TF_CMD output -raw cluster_name 2>/dev/null | sed -E 's/::debug::Terraform exited with code 0\.//; /^\[command\]/d; /^::/d; s/[[:space:]]+$//')
          cluster_endpoint=$($TF_CMD output -raw cluster_endpoint 2>/dev/null | sed -E 's/::debug::Terraform exited with code 0\.//; /^\[command\]/d; /^::/d; s/[[:space:]]+$//')


          # Validate outputs
          if [ -z "$cluster_name" ] || [ -z "$cluster_endpoint" ]; then
            echo "Failed to fetch Terraform outputs. Check your Terraform output definitions."
            $TF_CMD output
            exit 1
          fi

          echo "Parsed Outputs:"
          echo " - cluster_name: $cluster_name"
          echo " - cluster_endpoint: $cluster_endpoint"

          # Export for next jobs
          {
            echo "cluster_name=$cluster_name"
            echo "cluster_endpoint=$cluster_endpoint"
          } >> "$GITHUB_OUTPUT"


  karpenter:
    runs-on: ubuntu-latest
    needs: terraform

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CLUSTER_NAME: ${{ needs.terraform.outputs.cluster_name }}
      CLUSTER_ENDPOINT: ${{ needs.terraform.outputs.cluster_endpoint }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.14.0'

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Install Karpenter Helm Chart
        run: |
          helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter \
            --version 1.6.0 \
            --namespace kube-system \
            --create-namespace \
            --set settings.clusterName=$CLUSTER_NAME \
            --set settings.clusterEndpoint=$CLUSTER_ENDPOINT \
            --set webhook.enabled=false \
            --wait 

      #- name: Apply Karpenter CRDs
      #  run: |
      #    kubectl apply -f ./K8s/karpenter/karpenter-provisioners-crd.yaml

      - name: Apply Karpenter Provisioner
        run: |
          echo "Applying Karpenter provisioner with cluster name: $CLUSTER_NAME"
          sudo apt-get update -y && sudo apt-get install -y gettext-base
          envsubst < ./K8s/karpenter/karpenter-provisioners.yaml | kubectl apply -f -

      - name: Verify Installation
        run: |
          echo "Checking Karpenter pods..."
          kubectl get pods -n kube-system | grep karpenter || true
